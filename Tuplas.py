# ------------------------------------------------------------------------------------------
# -- Tuplas em Phyton ----------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
# -- São uma sequencia de objetos IMUTÁVEIS, que uma vez criadas não podem ser modificadas -
# -- São utilizadas para guardar dados protegidos ------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
linguagens = ("Phyton", "Ruby", "Javascript", "Perl", "Haskell") # -------------------------
print(linguagens) # -- ('Phyton', 'Ruby', 'Javascript', 'Perl', 'Haskell') -----------------
'''''
# ------------------------------------------------------------------------------------------
# -- ACESSANDO UM TUPLA --------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
linguagens = ("Phyton", "Ruby", "Javascript", "Perl", "Haskell")----------------------------
print(linguagens[0:2]) ---> ( "Phyton", "Ruby" ) -------------------------------------------
--------------------------------------------------------------------------------------------
'''''
# --    | Linguaguns | = |   00   |   01   |   02   |   03   |   04   |---------------------
# --    |   [0:1]    | = | Phyton |-----------------------------------|---------------------
# --    |   [0:2]    | = | Phyton |  Ruby  |--------------------------| --------------------
# --    |   [0:3]    | = | Phyton |  Ruby  |  JavaS |-----------------| --------------------
# --    |   [0:4]    | = | Phyton |  Ruby  |  JavaS |  Perl  |--------| --------------------
# --    |   [0:5]    | = | Phyton |  Ruby  |  JavaS |  Perl  |Haskell | --------------------
'''''
--------------------------------------------------------------------------------------------

linguagens = ("Phyton", "Ruby", "Javascript", "Perl", "Haskell") ---------------------------
print(linguagens[-5]) ---> ( "Heskell" ) ---------------------------------------------------
| Linguaguns | = |  -5    |  -4    |   -3   |  -2   |   -1    |  ---------------------------
--------------------------------------------------------------------------------------------
linguagens = ("Phyton", "Ruby", "Javascript", "Perl", "Haskell") ---------------------------
print(linguagens[:-4]) --> Saca a lista menos 'x' elemento, por exemplo, menos 4 -----------
| Nesse caso me retona apenas ( "Phyton") --------------------------------------------------
'''''
# ------------------------------------------------------------------------------------------
# -- ATUALIZANDO UM TUPLA ------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
# -- linguagens = ("Phyton", "Ruby", "Javascript", "Perl", "Haskell") ----------------------
# -- linguagens[0] = "C++" -----------------------------------------------------------------
# -- Visto que tuplas são informações imutaveis vai nos retornar: --------------------------
# -- # TypeError: 'tuple' object does not support item assignment --------------------------
# -- Porem podemos capturar porções de uma tupla e criar novas: ----------------------------
'''''
x = (1,2)   --> Nos temos a lista x com os numeros 1 e 2 -----------------------------------
y = (3,4)   --> Queremos adicionas os numeros 3 e 4 ----------------------------------------
z = (x + y) --> Vamos fazer uma concatenação de X e Y --------------------------------------
print(z)    --> Juntamos X e Y em uma nova Tupla | ( 1, 2, 3, 4 ) --------------------------
'''''
# ------------------------------------------------------------------------------------------
# -- IMPRIMINDO ELEMENTOS DE UMA TUPLA -----------------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
estudante = ('Miguel', 29, 1990, 'Brasil')
-- Percorre os valores da tupla estudante --------------------------------------------------
for e in estudante: # ----------------------------------------------------------------------
    print(e)  # --> Imprimir os valores | (" Miguel 29 1990 Brasil ") | --------------------
--------------------------------------------------------------------------------------------
-- List Conprehension ----------------------------------------------------------------------
estudante = ('Miguel', 29, 1990, 'Brasil') -------------------------------------------------
print([e for e in estudante]) --> ['Miguel', 29, 1990, 'Brasil'] ---------------------------
'''''
# ------------------------------------------------------------------------------------------
# -- CHECANDO OS VALORES EM UMA TUPLA ------------------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
# -- estudante = ('Miguel', 29, 1990, 'Brasil') --------------------------------------------
# -- print('Gabriel' in estudante)  --> Nos retorna | False | pois não há nenhum Gabriel ---
# -- print(1990 in estudante)       --> Nos retorna | True  | pois há 1990 na Tupla --------
# -- print('Japão' not in estudante)     --> Testando a absência de um det. elemento -------
'''''
# ------------------------------------------------------------------------------------------
# -- VERIFICANDO O TAMANHO DE UMA TUPLA ----------------------------------------------------
# ------------------------------------------------------------------------------------------
# -- Para verificarmos o numero de itens de uma tupla usamos o metodo len() ----------------
# ------------------------------------------------------------------------------------------
'''''
estudante = ('Miguel', 29, 1990, 'Brasil')
# -- print(len(estudante)) --> Me retona que temos 4 itens ---------------------------------
'''''
# ------------------------------------------------------------------------------------------
# -- DELETANDO ITENS EM UMA TUPLA ----------------------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
estudante = ('Miguel', 29, 1990, 'Brasil')
del estudante    --> Deleta a tupla por completo
print(estudante) --> name 'estudante' is not defined
'''''
# ------------------------------------------------------------------------------------------
# -- CONSTRUTOR TUPLE() --------- ----------------------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
numeros = tuple(x for x in range(1, 20, 3)) --> pedimos uma tupla de 1 a 20 de 3 em 3 ------
print(numeros) --> Nos mostrou | (1, 4, 7, 10, 13, 16, 19) | -------------------------------
'''''
# ------------------------------------------------------------------------------------------
# -- METODO COUNT() --------- --------------------------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
numeros = tuple(x for x in range(1, 20, 3))  --> pedimos uma tupla de 1 a 20 de 3 em 3 -----
print(numeros.count(7))  --> Nos mostrou a quantidade de numeros gerados -------------------
'''''
# ------------------------------------------------------------------------------------------
# -- CRIANDO UMA FUNÇÃO QUE RETORNA UMA TUPLA ----------------------------------------------
# ------------------------------------------------------------------------------------------
'''''
| import math                                                           | ------------------
|                                                                       | ------------------
| def f(r):                                                             | ------------------
|   """  Retornar (circunferencia, area) de um circulo de raio r """    | ------------------
|    c = 2 * math.pi * r                                                | ------------------                      
|    a = math.pi * r * r                                                | ------------------
|    return (c, a)                                                      | ------------------
|print(f(5)) --> quero que me mostre com raio 5 |(31.41592653589793, 78.53981633974483)| ---
|print(f(3)) -->  quero que me mostre com raio 3 |(18.84955592153876, 28.274333882308138)| -
'''''
# ------------------------------------------------------------------------------------------
# -- TUPLAS VS LISTAS ----------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
# -- Devemos usar tuplas a inves de listas pois: -------------------------------------------
# -- A execução de um programa é mais rápida -----------------------------------------------
# -- Usar a tupla nos protege de acidentes de modifocação ----------------------------------

# -- Exemplo com Lista ---------------------------------------------------------------------
'''''
# numeros_primos = [2, 3, 5, 7, 11, 13, 17] ------------------------------------------------
# print(f'# Primos: {len(numeros_primos)}') # --> # Primos: 7 ------------------------------
# -- Iterando sob sequencia ----------------------------------------------------------------
# -- for p in numeros_primos: --------------------------------------------------------------
# --    print(f'Primos: {p}') --------------------------------------------------------------
# -- Exemplo com TUPLA ---------------------------------------------------------------------
# -- print(f'# Numeros Primos: {len(numeros_primos)}') -------------------------------------
# -- Iterando sob sequencia ----------------------------------------------------------------
# -- for p in numeros_primos: --------------------------------------------------------------
# --    print(f'Primos: {p}') --------------------------------------------------------------
'''''



